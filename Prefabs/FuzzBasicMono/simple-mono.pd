#N canvas 252 205 1124 1225 12;
#X obj 174 231 unpack 0 0;
#X obj 174 292 mtof;
#X obj 174 518 select 0;
#X text 645 6 Copyright 2019 Dan Bornstein <danfuzz@milk.com>. Licensed
AS IS and WITHOUT WARRANTY under the Apache License \, Version 2.0.
Details: <http://www.apache.org/licenses/LICENSE-2.0>, f 65;
#X obj 297 363 send \$0-got-frequency;
#X obj 130 769 receive \$0-active-frequency;
#X obj 23 873 select 1;
#X obj 932 686 receive \$0-got-frequency;
#X msg 900 807 frequency \$1;
#X obj 918 769 send \$0-active-frequency;
#X obj 23 600 bang;
#X obj 55 645 receive \$0-got-frequency;
#X obj 241 292 send \$0-got-velocity;
#X obj 206 393 receive \$0-got-velocity;
#X text 225 413 Buffer the velocity \, and only send messages to the
voice once the note number is processed. We have to do this because
we can only decide what to do (start a note \, stop a note \, or ignore
it) _after_ we know the frequency \; and Pd's right-to-left processing
nature means that the `unpack` above ends up sending the velocity _before_
the note number.;
#X text 352 586 Note-on message.;
#X text 87 571 Note-off message.;
#X obj 174 330 trigger bang float;
#X obj 174 199 inlet;
#X obj 74 948 send \$0-is-on;
#X obj 508 1182 outlet;
#X obj 74 913 int 0;
#X obj 394 675 int 1;
#X obj 394 714 send \$0-is-on;
#X obj 237 797 receive \$0-is-on;
#X text 42 713 Only turn off if there is currently a note on \, and
it's the same frequency as being told to turn off., f 39;
#X obj 23 835 expr ($f1 == $f2) && ($f3 == 1);
#X obj 394 633 trigger bang bang float bang, f 53;
#X msg 764 725 velocity \$1;
#X obj 604 725 receive \$0-is-on;
#X obj 516 764 expr $f2 == 1;
#X msg 516 837 on;
#X obj 516 801 select 0;
#X msg 569 836 on-top;
#X obj 508 1140 receive \$0-outlet;
#X obj 516 880 send \$0-outlet;
#X msg 23 1012 off;
#X obj 23 1045 send \$0-outlet;
#X obj 764 762 send \$0-outlet;
#X obj 900 850 send \$0-outlet;
#X text 6 66 This receives note-velocity pairs on its inlet (`0` velocity
to indicate note off) and in turn outputs the messages expected by
`voice` (see `interface.md` for details). This object specifically
implements about the simplest _useful_ monophonic synth model: (a)
There is no more than one outstanding `on` at any given time. (b) Later
note-ons (without an intervening note-off) update the active frequency
and velocity. (c) There is no memory of "overridden" notes. On that
last point \, that is to say a note-off of the currently playing note
causes an `off` output and _not_ a reversion to some other still-held-down
note., f 86;
#X obj 241 263 expr max(0 \, min($f1 / 127 \, 1));
#X text 464 264 Convert MIDI velocity to fraction in range (0..1].
;
#X obj 900 725 float;
#X obj 23 681 float;
#X obj 174 479 float;
#X connect 0 0 1 0;
#X connect 0 1 41 0;
#X connect 1 0 17 0;
#X connect 2 0 10 0;
#X connect 2 1 27 0;
#X connect 5 0 26 1;
#X connect 6 0 36 0;
#X connect 6 0 21 0;
#X connect 7 0 43 1;
#X connect 8 0 39 0;
#X connect 10 0 44 0;
#X connect 11 0 44 1;
#X connect 13 0 45 1;
#X connect 17 0 45 0;
#X connect 17 1 4 0;
#X connect 18 0 0 0;
#X connect 21 0 19 0;
#X connect 22 0 23 0;
#X connect 24 0 26 2;
#X connect 26 0 6 0;
#X connect 27 0 22 0;
#X connect 27 1 30 0;
#X connect 27 2 28 0;
#X connect 27 3 43 0;
#X connect 28 0 38 0;
#X connect 29 0 30 1;
#X connect 30 0 32 0;
#X connect 31 0 35 0;
#X connect 32 0 31 0;
#X connect 32 1 33 0;
#X connect 33 0 35 0;
#X connect 34 0 20 0;
#X connect 36 0 37 0;
#X connect 41 0 12 0;
#X connect 43 0 8 0;
#X connect 43 0 9 0;
#X connect 44 0 26 0;
#X connect 45 0 2 0;
