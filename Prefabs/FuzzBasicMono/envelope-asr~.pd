#N canvas 114 291 1390 1081 12;
#X text 925 13 Copyright 2019 Dan Bornstein <danfuzz@milk.com>. Licensed
AS IS and WITHOUT WARRANTY under the Apache License \, Version 2.0.
Details: <http://www.apache.org/licenses/LICENSE-2.0>, f 65;
#X obj 285 133 inlet;
#X text 311 869 Instantaneous amplitude \, float in range [0..1].;
#X text 334 133 Message `on <velocity>` or `off <velocity>`. `<velocity>`
is float in range [0..1].;
#X obj 910 123 loadbang;
#X obj 910 226 send \$0-attack-rate;
#X obj 1058 226 send \$0-release-rate;
#X obj 1058 125 loadbang;
#X obj 285 177 route off on, f 14;
#X obj 501 342 receive \$0-attack-rate;
#X obj 448 381 pack 0 0;
#X text 518 383 Pair `[<target-value> \, <msec>]`.;
#X text 559 411 Initial `0` message to reset the line to zero \, then
a message to initiate the attack portion of the envelope., f 37;
#X obj 314 843 outlet~;
#X obj 251 355 receive \$0-release-rate;
#X obj 448 272 clip 0 1;
#X text 13 61 Simple envelope \, which is just an attack-sustain-release
with fixed slopes. `on` velocity becomes the full amplitude value \,
and `off` velocity is ignored.;
#X obj 156 389 expr $f1 * $f2;
#X msg 156 422 0 \$1;
#X obj 145 713 send~ \$0-to-snapshot;
#X obj 156 270 bang;
#X obj 156 342 snapshot~;
#X obj 182 304 receive~ \$0-to-snapshot;
#X obj 314 616 line~ 0;
#X text 968 83 Fixed Parameters;
#X floatatom 910 189 6 0 10000 0 - - -;
#X floatatom 1058 189 6 0 10000 0 - - -;
#X msg 448 415 0 \, \$1 \$2, f 13;
#X text 5 733 The `release-rate` value is a rate not an absolute number
of msec (see comment at definition site) \, so snapshot the amplitude
at the moment of release initiation \, and use it to calculate the
correct ramp-down time., f 41;
#X obj 910 154 float 50;
#X obj 1058 156 float 1000;
#X obj 919 467 loadbang;
#X obj 570 621 receive \$0-transfer-exponent;
#X obj 919 618 send \$0-transfer-exponent;
#X obj 314 672 expr~ (pow($v2 \, $v1) - 1) / ($v2 - 1);
#X obj 919 552 nbx 6 14 1.1 10000 1 0 empty empty empty 0 -8 0 12 -262144
-1 -1 50 256;
#X text 874 252 These are slopes represented as the number of msec
to go from 0 to 1 (or back). Notably \, these are _not_ a fixed number
of msec to perform an attack or release: that would make all attacks
and releases take the same amount of time per se (despite velocity
differences) and also make a release-from-mid-attack take the wrong
amount of time (assuming the usual desire to maintain a consistent
slope)., f 53;
#N canvas 0 23 450 278 (subpatch) 0;
#X array \$0-transfer-function 250 float 0;
#X coords 0 1 250 0 250 250 1 0 0;
#X restore 1115 389 graph;
#X obj 868 950 expr (pow($f2 \, $f1) - 1) / ($f2 - 1), f 40;
#X obj 868 921 receive \$0-grapher-in;
#X obj 868 980 send \$0-grapher-out;
#X obj 989 781 receive \$0-transfer-exponent;
#X obj 910 861 grapher \$0-transfer-function \$0-grapher-in \$0-grapher-out
0 1, f 29;
#X obj 919 509 float 50;
#X text 873 647 Because perceived loudness operates (approximately)
exponentially with respect to amplitude \, we apply an exponential
curve to the output. You can see a visualization of the transfer curve
\, above., f 53;
#X obj 989 809 trigger bang float;
#X text 865 1000 This hooks the transfer function up to the graph (above).
Unfortunately there's no straightforward way to share the function
in the `expr` below with the "real" version in the `expr~` to the left
\, so we just duplicate it.;
#X connect 1 0 8 0;
#X connect 4 0 29 0;
#X connect 7 0 30 0;
#X connect 8 0 20 0;
#X connect 8 1 15 0;
#X connect 9 0 10 1;
#X connect 10 0 27 0;
#X connect 14 0 17 1;
#X connect 15 0 10 0;
#X connect 17 0 18 0;
#X connect 18 0 23 0;
#X connect 20 0 21 0;
#X connect 21 0 17 0;
#X connect 22 0 21 0;
#X connect 23 0 19 0;
#X connect 23 0 34 0;
#X connect 25 0 5 0;
#X connect 26 0 6 0;
#X connect 27 0 23 0;
#X connect 29 0 25 0;
#X connect 30 0 26 0;
#X connect 31 0 43 0;
#X connect 32 0 34 1;
#X connect 34 0 13 0;
#X connect 35 0 33 0;
#X connect 38 0 40 0;
#X connect 39 0 38 0;
#X connect 41 0 45 0;
#X connect 43 0 35 0;
#X connect 45 0 42 0;
#X connect 45 1 38 1;
